% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{fastPCA_BED}
\alias{fastPCA_BED}
\title{Perform fast SVD for a matrix in BED format}
\usage{
fastPCA_BED(inputFile, k = 5, l, mem, its = 2, phenoFile = -1,
  diffsnorm = FALSE, centeringRow = TRUE, centeringColumn = FALSE)
}
\arguments{
\item{inputFile}{Base file name for the .bed,.fam, .bim files.  All three of these files must be present in the same folder: <inputFile>.bed <inputFile>.fam <inputFile>.bim.}

\item{k}{Rank of decomposition. Default: 5}

\item{l}{Block size. Default k+2}

\item{mem}{Amount of memory the algorithm is allowed to use in bytes.  Must be greater than the number of columns * 8 (i.e. the memory to store one row).}

\item{its}{Number of normalized power iterations. Default: 2}

\item{phenoFile}{Path to a phenotype file, the attributes of which will be returned in the FastPCA object, in the same order as the V matrix}

\item{diffsnorm}{Calculate 2-norm accuracy, i.e. ||A-USV||_2.}

\item{centeringRow}{Center the rows prior to decomposition. Default: TRUE}

\item{centeringColumn}{Center the columns prior to decomposition. Default: FALSE}
}
\value{
A FastPCA object, containing the decomposition.  Also, has the ordered phenotype information
}
\description{
This function performs a nearly optimal rank-k approximation to the singular value decomposition inputMatrix = USV' on a GWAS matrix that is passed via BED format.  Please see references for explanation of 'nearly optimal.'
}
\details{
Missing values will be imputed by replacing the missing value with the row average.  If centeringRow is set to TRUE, then this just means replacing the missing values with 0.
Note that unlike in the other functions, centeringRow defaults to true here
}
\examples{

fn <-sprintf("\%s/example_with_impute", system.file("tests", package="fastRPCA")) ;
fastDecomp <- fastPCA_BED(fn, k=5,l=5, mem=1E3, diffsnorm=TRUE)
str(fastDecomp)

#Now, to check, let's take the same matrix and do the imputation and row centering in R
Dm <- matrix(c( 1,1,1,NA,2,2, 1, 0,NA,0, 0,1,1,2,1,2,2,1,0,0,0,1,1,2,2,1,1,NA,1,2,2,2,NA,1,1),nrow=7,ncol=5, byrow=TRUE);
D <- Dm;
k <- which(is.na(D), arr.ind=TRUE)
D[k] <- rowMeans(D, na.rm=TRUE)[k[,1]]
Dt <- t(scale(t(D), center=TRUE, scale=FALSE));
norm(Dt - fastDecomp$U \%*\% fastDecomp$S \%*\%t(fastDecomp$V), type='2')


#Another example
#Before publication, this example will be replaced by test data
#fastDecompBed10E3 <- fastPCA_BED("/data/GERA_DECRYPTED/LindermanAnalysis/EUR/Benchmark/eur_100000_62318/eur_100000_62318",k = 20, mem=8e+10, l=22,centeringRow=TRUE, phenoFile="/data/GERA_DECRYPTED/38852/PhenoGenotypeFiles/RootStudyConsentSet_phs000674.GERA.v1.p1.c1.HROO/PhenotypeFiles/phs000674.v1.pht003641.v1.p1.c1.Survey.HROO.txt")
#str(fastDecompBed10E3)
#plot(fastDecompBed10E3$V[,1], fastDecompBed10E3$V[,2], pch='.', col=factor(fastDecompBed10E3$phenos$RACE))

}

